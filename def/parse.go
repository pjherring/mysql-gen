package def

import (
	"encoding/json"
	"strings"
)

type rawDef struct {
	Name          string            `json:"name"`
	Fields        map[string]string `json:"fields"`
	Queries       map[string]string `json:"queries"`
	PrimaryKeys   []string          `json:"primary_keys"`
	AutoGenerated []string          `json:"auto_generated"`
}

func ParseTable(b []byte) (*Table, error) {

	var raw rawDef

	if err := json.Unmarshal(b, &raw); err != nil {
		return nil, err
	}

	return TableFromRaw(raw)

	retval.Raw = raw.Name
	retval.Name = strings.Title(raw.Name)
	if retval.Name[len(retval.Name)-1] == 's' {
		retval.Name = retval.Name[0 : len(retval.Name)-1]
	}

	retval.Queries = ParseQueries(raw)

	for _, column := range raw.PrimaryKeys {
		retval.fieldMap[column].IsPrimaryKey = true
		retval.PrimaryKeys = append(retval.PrimaryKeys, retval.fieldMap[column])
	}

	for _, column := range raw.AutoGenerated {
		retval.fieldMap[column].IsAutoGenerated = true
	}

	return retval, nil
}
