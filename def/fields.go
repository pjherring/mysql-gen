package def

import "strings"

type Fields []*Field

type FieldFilter func(f *Field) bool
type StringMember func(f *Field) string

func IsPrimaryKey(f *Field) bool {
	return f.IsPrimaryKey
}

func NotPrimaryKey(f *Field) bool {
	return !f.IsPrimaryKey
}

func NotAutoGenerated(f *Field) bool {
	return !f.IsAutoGenerated
}

func IsAutoGenerated(f *Field) bool {
	return f.IsAutoGenerated
}

func (f Fields) Filter(filter FieldFilter) Fields {
	var retval Fields
	for _, field := range f {
		if filter(field) {
			retval = append(retval, field)
		}
	}

	return retval
}

func (f Fields) Strings(s StringMember) []string {
	var retval []string

	for _, field := range f {
		retval = append(retval, s(field))
	}

	return retval
}

func (f Fields) Len() int {
	return len(f)
}

func (f Fields) Less(i, j int) bool {
	return strings.Compare(f[i].Name, f[j].Name) < 0
}

func (f Fields) Swap(i, j int) {
	tmp := f[i]
	f[i] = f[j]
	f[j] = tmp
}
