package def

import (
	"sort"
	"strings"

	"github.com/pjherring/mysql-gen/util"
)

type Field struct {
	Arg             string
	Name            string
	Type            string
	Raw             string
	Order           int
	IsPrimaryKey    bool
	IsAutoGenerated bool
}

type Table struct {
	Name        string
	Raw         string
	Fields      Fields
	fieldMap    map[string]*Field
	Queries     map[string]Query
	PrimaryKeys Fields
}

func (t Table) Field(name string) *Field {
	return t.fieldMap[name]
}

func TableFromRaw(r rawDef) *Table {
	t := new(Table)

	t.initName(r.Name)
	t.setFields(r.Fields)
	t.initQueries(r)

}

func (t *Table) initName(name string) {
	t.Raw = name
	t.Name = strings.Title(name)

	if t.Name[len(t.Name)-1] == 's' {
		t.Name = t.Name[0 : len(t.Name)-1]
	}
}

func (t *Table) initQueries(r rawDef) {
	t.Queries = map[string]Query{}
	for name, sql := range r.Queries {
		t.Queries[name] = t.parseQuery(name, sql)
	}
}

func (t *Table) parseQuery(name, sql string) {
	return Query{
		Name:         strings.Title(name),
		IsMulti:      isMulti(name),
		Params:       parseQueryParams(r, sql, retval.fieldMap),
		SelectFields: parseSelectFields(r, sql, retval.fieldMap),
		Sql:          sql,
	}
}

func (t *Table) initFields(fieldMap map[string]string) {
	for name, _type := range fieldMap {
		f := &Field{
			Arg:  util.UnderscoreToCamelCase(name),
			Type: _type,
			Raw:  name,
		}

		f.Name = strings.Title(f.Arg)

		t.Fields = append(t.Fields, f)
		t.fieldMap[name] = f
	}

	sort.Sort(t.Fields)
}
