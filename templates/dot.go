package templates

import (
	"strings"

	"github.com/pjherring/mysql-gen/def"
	"github.com/pjherring/mysql-gen/util"
)

type templateDot struct {
	def.Table
	PackageName  string
	FirstInitial string
}

func newTemplateDot(t def.Table) templateDot {
	return templateDot{
		Table:        t,
		FirstInitial: strings.ToLower(t.Name)[0:1],
	}
}

func (t templateDot) NotAutoGeneratedColumns() string {
	return strings.Join(
		t.Fields.Filter(def.NotAutoGenerated).Strings(columnMember),
		", ",
	)
}

func (t templateDot) AllColumns() string {
	return strings.Join(t.Fields.Strings(columnMember), ", ")
}

func (t templateDot) AutoGeneratedName() string {
	return t.Fields.Filter(def.IsAutoGenerated)[0].Name
}

func (t templateDot) NotAutoGeneratedNames() string {
	return strings.Join(
		t.Fields.Filter(def.NotAutoGenerated).Strings(nameMember),
		", ",
	)
}

func (t templateDot) NotAutoGeneratedColumnCnt() int {
	return len(t.Fields.Filter(def.NotAutoGenerated))
}

func (t templateDot) Placeholders(cnt int) string {
	s := strings.Repeat("?, ", cnt)
	return s[:len(s)-2]
}

func (t templateDot) PrimaryKeyNames() string {
	return strings.Join(
		t.Fields.Filter(def.IsPrimaryKey).Strings(nameMember),
		", ",
	)
}

func (t templateDot) PrimaryKeyColumnPlaceholders() string {
	return strings.Join(
		t.Fields.Filter(def.IsPrimaryKey).Strings(columnPlaceholderMember),
		", ",
	)
}

func (t templateDot) PrimaryKeyTypedArguments() string {
	return strings.Join(t.Fields.Filter(def.IsPrimaryKey).Strings(typedArgumentMember), ", ")
}

func (t templateDot) PrimaryKeyArguments() string {
	return strings.Join(t.Fields.Filter(def.IsPrimaryKey).Strings(argumentMember), ", ")
}

func (t templateDot) NonPrimaryKeyColumnsPlaceholders() string {
	return strings.Join(
		t.Fields.Filter(def.NotPrimaryKey).Strings(columnPlaceholderMember),
		", ",
	)
}

func (t templateDot) NonPrimaryKeyNames() string {
	return strings.Join(
		t.Fields.Filter(def.NotPrimaryKey).Strings(nameMember),
		", ",
	)
}

func typedArgumentMember(f *def.Field) string {
	return util.LowercaseFirst(f.Name) + " " + f.Type
}

func argumentMember(f *def.Field) string {
	return util.LowercaseFirst(f.Name)
}

func nameMember(f *def.Field) string {
	return "t." + f.Name
}

func columnPlaceholderMember(f *def.Field) string {
	return f.Raw + " = ?"
}

func columnMember(f *def.Field) string {
	return f.Raw
}
